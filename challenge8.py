##############
## Largest Product in a Series
##############

series_num = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858" \
             "6156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557668966" \
             "4895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749303589072" \
             "9629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010" \
             "5336788122023542180975125454059475224352584907711670556013604839586446706324415722155397536978179778461" \
             "7406495514929086256932197846862248283972241375657056057490261407972968652414535100474821663704844031998" \
             "9000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294" \
             "7654568284891288314260769004224219022671055626321111109370544217506941658960408071984038509624554443629" \
             "8123098787992724428490918884580156166097919133875499200524063689912560717606058861164671094050775410022" \
             "5698315520005593572972571636269561882670428252483600823257530420752963450"


def multiply_set():
    start_int = 0
    end_int = 13
    highest_product = 0
    best_set = ''
    while end_int < len(series_num):
        set_of_13 = series_num[start_int:end_int]
        if '0' in set_of_13:
            start_int += 1
            end_int += 1
        else:
            set_product = int(set_of_13[0])
            for digit in set_of_13[1:]:
                set_product *= int(digit)
            if set_product > highest_product:
                highest_product = set_product
                best_set = set_of_13
            start_int += 1
            end_int += 1
    return '{} is the largest product, multiplied by each of the numbers in {}. ' \
           'Found starting at character {}.'.format(highest_product, best_set, series_num.find(best_set))


print(multiply_set())
